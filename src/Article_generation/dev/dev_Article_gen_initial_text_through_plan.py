from openai import AsyncOpenAI
import requests
import aiohttp
import json
import pandas as pd
from bs4 import BeautifulSoup
from urllib.parse import urlparse
from langchain_community.document_loaders import UnstructuredURLLoader
import logging
from aiohttp import ClientSession
import serpstat

from src.config import settings_pr

client = AsyncOpenAI(
    api_key=settings_pr.openai_api_key
)

async def generate_keywords_for_article_gpt(title: str) -> str:
    
    # Промт для генерации ключевых слов на основе названия статьи
    promt = """
        Generate 10 SEO-friendly keywords for an article titled: '{title}'. 
        
        Output the keywords in one line without numbering or bullet points, separated by a single space, without any line breaks.
        
    """.format(title=title)
    
    try:
        # Взаимодействие с OpenAI API для генерации ключевых слов
        # completion = client.chat.completions.create(
        #     # model="gpt-4o",  
        #     model="o1-preview",
        #     messages= [
        #         {
        #             "role": "user", 
        #             "content": promt
        #         }
        #     ]
        # )
        
        completion = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
                {"role": "system", "content": "You are a professional SEO content writer."},
                {"role": "user", "content": promt}
            ]
        )
        
        # Возвращаем сгенерированные ключевые слова
        return str(completion.choices[0].message.content) 
    except Exception as e:
        print(f"Error during keyword generation: {e}")
        return ""
    
    
    
async def rewrite_keywords_title(title: str, keywords: str) -> str:
    
    # Промт для генерации ключевых слов на основе названия статьи
    prompt = f"""
        Ты являешься экспертом по SEO и оптимизации контента. Твоя задача — взять следующий заголовок статьи и список ключевых слов, проанализировать их, а затем переформулировать заголовок, органично добавив в него релевантные ключевые слова из списка для улучшения SEO.

        Заголовок статьи: '{title}'

        Ключевые слова: {keywords}

        Новый заголовок должен:
        - Включать 1-2 ключевых слова из списка, где это уместно (приоритетные ключевые слова следует использовать в первую очередь).
        - Сохранять естественный, увлекательный поток и соответствовать целевой аудитории (например, маркетологи, технические специалисты, широкая публика).
        - Избегать чрезмерного использования ключевых слов (keyword stuffing).
        - Оставаться понятным и легко воспринимаемым для читателей.
        - Заголовок должен быть ограничен 60 символами для оптимального отображения в поисковых системах.
        - Сохранять соответствующий стиль текста (например, профессиональный, разговорный, новостной).
        
         - !!! УБРАТЬ любое упоминание компании или организации, которая написала эту статью !!!

        Пожалуйста, верни ТОЛЬКО переформулированный заголовок в виде одного предложения, без ковычек, скобок и лишних слов.
    """
    
    try:
        # Взаимодействие с OpenAI API для генерации ключевых слов
        # completion = client.chat.completions.create(
        #     # model="gpt-4o",  
        #     model="o1-preview",
        #     messages= [
        #         {
        #             "role": "user", 
        #             "content": promt
        #         }
        #     ]
        # )
        
        completion = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
                {"role": "system", "content": "You are a professional SEO content writer."},
                {"role": "user", "content": prompt}
            ]
        )
        
        # Возвращаем сгенерированные ключевые слова
        return str(completion.choices[0].message.content)
    except Exception as e:
        print(f"Error during keyword generation: {e}")
        return ""


    
async def generate_keywords_for_article(url: str, title: str, session: aiohttp.ClientSession) -> str:
    
    try:
        
        se = "g_by"
        keywords = await serpstat.get_page_keywords(session, url, se)
        
        if not keywords:
            
            parsed_url = urlparse(url)
            domain = parsed_url.netloc
            keywords = await serpstat.get_page_keywords(domain, url, se)
            
            if not keywords:
                keywords = await generate_keywords_for_article_gpt(title)
                return keywords
            
            return keywords
        
        return keywords
        
    except Exception as e:
        print(f"Error during keyword generation: {e}")
        return ""

###############################################################################################################################################

# Обработчик ошибок
def log_error(message: str, error: Exception):
    logging.error(f"{message}: {error}")

async def gen_keyword_article(url: str, article_title: str, session: ClientSession) -> str:
    
    total_tokens_4о = 0
    total_tokens_o1 = 0
    
    # try:
    #     # Парсинг контента статьи
    #     loader = UnstructuredURLLoader(urls=[url])
    #     content = loader.load()

    #     # Проверяем, что контент не пустой
    #     if content and content[0].page_content:
    #         article_content = content[0].page_content
    #     else:
    #         raise ValueError("Content_error: Статья пуста или не была загружена")

    # except Exception as e:
    #     log_error("Ошибка при парсинге контента статьи", e)
    #     return "Не удалось загрузить контент статьи."
    
    # try:
    # # Синхронный GET-запрос
    #     response = requests.get(url, timeout=10)
    #     response.raise_for_status()  # Проверяем, что запрос прошел успешно

    #     # Попытка установить правильную кодировку с заголовков ответа
    #     response.encoding = response.apparent_encoding

    #     # Получаем содержимое страницы
    #     text = response.text
    #     # Парсим содержимое страницы с помощью BeautifulSoup
    #     article_content = BeautifulSoup(text, 'html.parser')
        
    #     # Извлекаем заголовок статьи
    #     # article_title = soup.find('title').get_text() if soup.find('title') else "No Title Found"
    #     # print(f"Title of the article: {article_title}")

    # except requests.RequestException as e:
    #     print(f"Ошибка при запросе: {e}")


    article_content = """
            
            «У нас даже уборщица проверяет, на каком сайте покупает билеты» — примерно так можно описать желаемый уровень культуры кибербезопасности в компании. Но как добиться, чтобы каждый сотрудник осознавал, что тоже причастен к защите данных и систем бизнеса? Поговорили с руководителем технического центра «АйТи Бастион» Владимиром Алтуховым о том, как сделать кибербезопасность частью корпоративной культуры компании. Спойлер: задача будет со звездочкой.

            Компания «АйТи Бастион» — ведущий игрок на рынке кибербезопасности, предлагающий широкий спектр услуг для защиты информации и управления рисками. Она работает с различными секторами, включая банки и телекоммуникационные компании, и активно развивает программы обучения по кибербезопасности.

            Продукт СКДПУ НТ (Система Контроля Действий Поставщиков ИТ-Услуг) предназначен для управления привилегированным доступом в корпоративных системах. Он обеспечивает контроль за пользователями с повышенными правами, минимизируя риски несанкционированного доступа и утечек данных. Система реализует модель нулевого доверия и принцип наименьших привилегий, позволяя точно контролировать, кто и когда имеет доступ к критически важным ресурсам.

            «Думаете, это не обязательно? Игнорируете реальность»
            — Почему забота о кибербезопасности вообще важна для бизнеса? Может показаться, что переживать об этом нужно только компаниям-гигантам, у которых бизнес построен на Data.

            — Киберграмотность и кибербезопасность стали неотъемлемой частью нашей жизни. Относиться к этому как к чему-то необязательному — значит игнорировать реальность.
            У нас есть культура общения и морально-этические нормы поведения в обществе… И поскольку сфера информационных технологий является важной частью нашей жизни, правила безопасности в ней тоже необходимы.

            — Знаю, что вы принимали участие в форуме по кибербезопасности, который прошел в Минске в начале октября. Насколько эта тематика в белорусских компаниях актуальна?

            — Актуальна в высшей степени — не только в России или Беларуси, но для компаний во всем мире. Мы живем в информационном обществе. Без качественно выстроенной кибергигиены, культуры общения и взаимодействия с информационной средой мы получаем дырявое решето, где все знают обо всех всё и о конфиденциальности не может быть и речи. А это не совсем хорошая история.

            — Но как кибербезопасность связана с бизнесом?

            — Для бизнеса данные — это актив. Утечка информации может привести к репутационным рискам. Например, если имя компании появляется в новостях из-за утечки данных, это может вызвать недовольство клиентов и партнеров. Или «слив» базы данных даст преимущество конкурентам. Кроме того, последствия могут быть и более разрушительными: приостановка производства или шифрование инфраструктуры бизнеса приведет к значительным финансовым потерям.

            — Утечки данных в общий доступ — это основная киберугроза для бизнеса?

            — Наиболее распространенные угрозы — не только утечки данных, но и фишинговые атаки или заражение вирусом-шифровальщиком.



            Что касается фишинга: часто сотрудники открывают подозрительные письма с рабочих устройств и ставят под угрозу всю структуру. Злоумышленники используют доверительные обращения и создают стрессовые ситуации, чтобы заставить людей действовать иррационально. Например, могут написать от лица директора с сообщением о проверке ФСБ. Сотрудник пугается и может предоставить доступ мошенникам, перейдя по фишинговой ссылке.

            Но есть и банальные истории. Например, обидевшийся сотрудник может унести критически важную информацию или даже оставить «запасную дверь» — брешь в системе для доступа к информации после увольнения.

            Для сотрудника — это козырь при дальнейшем трудоустройстве или личная выгода. А для компании в перспективе потери потенциальных тысяч долларов выручки.
            Также стоит упомянуть случайные ошибки сотрудников. Неправильное обращение с конфиденциальной информацией может произойти даже без злого умысла: кто-то мог случайно отправить не то письмо или нажать не ту кнопку.

            «Раз и навсегда — не получится»
            — Каждый сотрудник должен быть в курсе хотя бы базовых правил кибербезопасности. Как компании могут внедрить такую культуру?

            — Важно проводить регулярные аудиты системы безопасности в компании и обучение сотрудников. Кроме того периодически нужно устраивать «учения», которые проверят эффективность предпринятых мер и выявят тонкие места. Работает только системный подход.

            Киберграмотность — это мышца, которую нужно постоянно тренировать.
            Основная ошибка — считать, что достаточно провести обучение один раз для всех. Но необходимо учитывать новых сотрудников и постоянно обновлять знания действующих. А еще обучение должно быть адаптировано под разные группы сотрудников в зависимости от их роли и доступа к критически важным данным. Например, уборщицы и главные бухгалтера должны получать разные уровни обучения (и доступа), но базовые принципы безопасности должны быть известны всем.

            Надо понимать, что раз и навсегда — не получится. Не только потому, что сотрудникам нужно освежать в памяти какие-то знания и правила, но и потому, что кибератаки тоже постоянно совершенствуются.

            Можно, например, использовать так называемые Security Awareness платформы. Это уже готовые решения, которые предназначены для того, чтобы обучать персонал.
            Весь процесс обучения по безопасности нужно разделить на несколько этапов:

            инструктажи или видеоинструкции для новеньких;
            регулярные тестирования для закрепления знаний и оценки эффективности обучения;
            тренинги по новым рискам и угрозам + повторение пройденных моментов.
            Важно понимать, что содержание курса обучения может и должно отличаться для разных сотрудников. Одно дело — для менеджера по продажам, другое — для директора, третье — для инженеров и программистов. Разработать единое и для всех — не вариант. Нужен гибкий подход.

            Бонусом можно сделать кибербезопасность прикольным «внутрячком». Например, в некоторых офисах есть тематические плакаты в духе «Болтун — находка для шпиона». Но еще лучше придумать практику ежемесячных напоминалок от директора. Если получится это сделать в легкой форме с мемами и шутками — это может быть эффективно.



            — Вернёмся к корпоративной культуре. Считается, что отношение к вопросам кибербезопасности формируется руководством. По вашему опыту, это так? Только прогрессивные руководители способны выстраивать киберзащиту?

            — Распространенное заблуждение: информационная безопасность только тратит бюджет и не приносит денег. Бизнес говорит на языке цифр. И, как правило, сначала руководитель службы информационной безопасности должен «продать» руководству идею выстраивания системы безопасности и обучения персонала. Для руководства важнее понимание эффективности и выгоды в цифрах: если мы не начнем использовать то или иное решение, то в случае проблем мы столько-то денег потеряем.

            Информационная безопасность — это вопрос не о том, чтобы не взломали, а о том, что мы будем делать, когда взломают.
            К счастью, уровень осознанности в части информационной безопасности растёт. В компаниях понимают, что мы должны адаптироваться к новому миру, где угрозы есть и будут на каждом шагу.



            — А как «заразить» сотрудников желанием выстраивать систему безопасности в компании?

            — Есть очень циничный, но рабочий подход — обратная финансовая мотивация. Если руководству нужно продавать эффективность, то сотрудников предупреждать о том. что будет при неэффективности.

            Как показывает практика, сотрудника способна мотивировать именно персональная ответственность.
            Но к счастью, отношение к кибергигиене — это хороший показатель в целом ответственности и зрелости сотрудника. Можно по этому принципу прямо и отсеять ненадежных. Если человек не готов пойти на обучение и соблюдать элементарные правила в своей работе, то это потенциально проблемный сотрудник. Если он в таких вопросах ненадежен, то где гарантия, что он будет надежен в остальной работе?

            — Можем ли мы составить маст-хэв технических решений для обеспечения кибербезопасности бизнеса?

            — Если мы говорим о построении контура информационной безопасности, то нельзя обойтись без таких вещей:

            межсетевые экраны;
            SIEM-системы, которые будут собирать информацию об инцидентах со всех источников;
            решения класса DLP (Data Leak Prevention) для защиты от утечек;
            PAM-системы для контроля внутренних администраторов и сотрудников подрядных организаций.
            SOAR-решения (средства автоматизации реагирования на инциденты);
            EDR-решения (Endpoint Detection and Response) — для обеспечения безопасности конечных точек;
            антивирусная защита;
            LMS (Learning Management System) для повышения киберграмотности сотрудников.


            Это могут быть готовые стандартные решения от интеграторов или кастомные продукты, доработанные специально под нужды и специфику компаний. В редких случаях могут быть уникальные собственные разработки. Но в любом случае все эти составляющие для крупной компании — базовые вещи.

            «Всегда будут атакующие, всегда будут защитники»
            — Ваш продукт СКДПУ НТ помогает контролировать действия привилегированных пользователей. Расскажите, зачем это нужно компаниям?

            — По сути наш продукт представляет собой комплексную PAM-платформу (Privileged Access Management). Он нужен, чтобы осуществлять контроль за пользователями, которые имеют повышенные права внутри инфраструктуры.

            При любой атаке обязательным этапом взлома является повышение привилегий пользователя. Для того, чтобы это не происходило бесконтрольно, существует такие системы как наша.

            Во-первых, СКДПУ НТ помогает определить и настроить права доступа для всех сотрудников. Можно задать правила, вплоть до конкретных временных промежутков для доступа. Мы берем за основу принцип Zero Trust (нулевого доверия). Это значит, что доступ будет ограничен ко всему, что не относится непосредственно к работе конкретного сотрудника.

            Также система обеспечивает защиту самого администратора. Ведётся полная запись его действий, логирование, отправка этих логов во всевозможные системы мониторинга (SIEM). Можно в любой момент обратиться к этим логам и найти бреши, подозрительные действия или ошибки.



            — Ваша система контролирует доступ только для сотрудников? Или использование систем извне тоже возможно под контролем СКПДУ НТ?

            — Даже больше скажу, PAM-решения изначально появились для того, чтобы контролировать внешних специалистов. К сожалению, наиболее актуальная на сегодняшний день угроза — атака на подрядчика. Потому что, как правило, крупная компания или корпорация — защищена по высшему уровню, т.к. вложила в защиту миллионы. Но вот подрядчик корпорации, который разрабатывал для нее что-то, не тратился и гораздо более легкая добыча. К тому же такой подход увеличивает радиус атаки, потому что атака на подрядчика — это атака фактически на все компании, которые обслуживаются у данного подрядчика.

            — Верно ли я понимаю, что ваш продукт работает в комплексе с корпоративной культурой кибербезопасности в компании?

            — Наша компания заинтересована в построении доверенной среды: когда решения, установленные в контуре безопасности, взаимодействуют друг с другом органично и взаимно дополняют друг друга. И в том числе одним из важнейших элементов является киберграмотность персонала.

            Да, не существует серебряной пули, которае бы решила все проблемы. Но есть решения, которые хороши каждое для своей конкретной задачи. И чем большее количество решений взаимодействует друг с другом, тем выше общий уровень кибербезопасности в организации.

            — Напоследок, давайте пофантазируем. Насколько критическим вопросом станет кибербезопасность в будущем?

            — Мошенники, попытки атаковать, хакеры и утечки данных — будут всегда. Как и попытки этому противостоять. Будут меняться методы атак и методы защиты от них. Но, чем выше осознанность сотрудников в части информационной безопасности, тем более успешной будет компания. Поэтому киберграмотность будут прививать уже с детского сада, как минимум вводить в школьные программы. Дети хорошо впитывают информацию, поэтому будут расти с базисом кибербезопасности. И когда в следующий раз придет фишинговое письмо, дети его проигнорируют так же легко, как мы пропускаем спам.

            Всегда будут атакующие, всегда будут защитники. Но я просто уверен, что мы будем с интересом раскусывать все новые мошеннические схемы. Кибербезопасность — это история вдолгую, но чем дальше, тем интереснее.

    """
    
    try:
        # Промт для удаления рекламы
        plan_query = f"""
        
            ### Роль ###:
                - Действуй как профессиональный аналитик текста.
                - Ты должен обработать предоставленный текст и выполнить следующие шаги, не изменяя исходный текст, за исключением удаления предложений, связанных с названием компании и её рекламой.
                
            ### Требования ###:
                - В итоговый вывод ДОБАВЬ ТОЛЬКО изначальный текст отфильрованный от предложения, которые относятся к названию компании и ее рекламы.
                - НЕ ВЫВОДИ свои рассуждения, а ВЫВЕДИ ТОЛЬКО итоговый ответ.
                - Сохраняй полностью структуру и содержание изначального текста.

            ### Инструкция ###:
            
            
                1. Определи название компании: Используй только текст URL, не переходя по ссылке. Определи название компании по основному домену и ключевым словам в URL. Игнорируй поддомены и любые параметры после основного URL. Если в URL не содержится явно название компании, постарайся извлечь его по тематике или ключевым словам.
                
                Пример: для URL www.example.com/shop-offers названием компании будет "Example".
                Найди упоминания компании и её рекламу в тексте:

                2. После того, как определишь название компании, найди все упоминания этого названия в тексте.
                Также найди предложения, связанные с рекламой этой компании (например, упоминания скидок, акций, специальных предложений).
                Пример рекламных предложений: "Скидка 50% на все товары компании Example", "Закажите сейчас и получите бесплатную доставку от Example".
                Отфильтруй предложения, связанные с компанией:

                3. После того как ты найдёшь все упоминания названия компании и её рекламы, выполни фильтрацию текста: удали все предложения, где есть упоминания названия компании и реклама.
                Важно: оставь все остальные части текста без изменений.
                Представь итоговый текст:

                4. Верни исходный текст, из которого удалены все предложения, связанные с названием компании и её рекламой. Не добавляй собственных рассуждений или выводов.
            
            ### Данные на вход ###:
            
                - Текст на вход: {article_content}
                - URL страницы: {url}
                
        """
        
        
        response = await client.chat.completions.create(
            model="o1-preview",
            messages=[{"role": "user", "content": plan_query}]
        )
        
        # model="gpt-4o",
        # messages=[
        #         {"role": "system", "content": "You are a professional SEO content writer."},
        #         {"role": "user", "content": plan_query}
        #     ]
        # )
        
        total_tokens_o1 += response.usage.total_tokens
        
        article_content = str(response.choices[0].message.content)

    except Exception as e:
        log_error("Ошибка при генерации плана статьи с помощью OpenAI", e)
        return "Не удалось сгенерировать план статьи."
    
    try:
        # Промт для выделения плана
        plan_query = """
            <tag>
                **Роль**: Ты выступаешь в роли **опытного аналитика и редактора**, который умеет работать с текстами разного формата. Твоя задача — проанализировать текст статьи и на его основе составить структурированный план. План должен отражать основную логику и ключевые разделы текста, сохраняя последовательность идей и структуры статьи.
            </tag>

            <tag>
                **Задача**: Получив текст статьи на вход, тебе необходимо составить план статьи, придерживаясь следующих рекомендаций:

                !!! СОБЛЮДАЙ ВСЕ ПРОПИСАННЫЕ ТРЕБОВАНИЯ В СЛЕДУЮЩЕМ РАЗДЕЛЕ !!!
            </tag>

            <tag>
                **Требования**:

                1. **Структурированность**: План должен быть логически выстроенным и отражать основные разделы статьи. Обозначь каждый пункт плана кратким описанием идеи или основного тезиса, заложенного в статье.
                
                2. **Иерархия**: План должен иметь ясную иерархию. Главные разделы (основные пункты плана статьи) статьи следует ОБЯЗАТЕЛЬНО обозначить в следущем формате: **Название раздела (пункта)**
                - НЕ ИСПОЛЬЗУЙ ПОДЗАГОЛОВИК, ПОДПУНКТЫ. ПЛАН ДОЛЖЕН СОСТОЯТЬ ТОЛЬКО ИЗ ОСНОВНЫХ РАЗДЕЛОВ. 
                - Не добавляй в заголовки шаблонные фразы, например введение, заключение, вывод, начало и другие
                - План ДОЛЖЕН включать в себя НЕ более 5 разделов (пунктов)
                
                3. **Последовательность**: Структура плана должна следовать за логикой и структурой оригинальной статьи. Учитывай введение, основную часть и заключение, даже если они не выделены явно в тексте.

                4. **Лаконичность**: Старайся не перегружать план деталями. Кратко излагай основную мысль каждого раздела статьи, сохраняя общий смысл текста.
                
                5. **Вывод информации**: 
                - Выводи исключительно план статьи, без других элементов. 
                - Выводи план на русском.
                - Не используй между пунктами плана пробел.
            </tag>

            <tag>
                **Текст статьи на вход**: ["{article_text}"]
            </tag>
        """.format(article_text=article_content)
        
        response = await client.chat.completions.create(
        #     model="o1-preview",
        #     messages=[{"role": "user", "content": plan_query}]
        # )
        
        model="gpt-4o",
        messages=[
                {"role": "system", "content": "You are a professional SEO content writer."},
                {"role": "user", "content": plan_query}
            ]
        )
        
        total_tokens_4о += response.usage.total_tokens
        
        article_plan = response.choices[0].message.content
        print(f"План статьи: {article_plan}")

    except Exception as e:
        log_error("Ошибка при генерации плана статьи с помощью OpenAI", e)
        return "Не удалось сгенерировать план статьи."

    try:
        # Промт для написания первичной статьи
        article_query = """
            <tag>
                **Роль**: Ты выступаешь в роли **опытного редактора и автора**, который умеет перерабатывать статьи, сохраняя их структуру и ключевые идеи. Твоя задача — написать новую статью, следуя предложенному плану и улучшая исходный материал.
            </tag>

            <tag>
                **Задача**: На основе исходной статьи по представленному тебе плану, строго ему придерживаясь (В ТЕКСТЕ НИКАК НЕ ПОМЕЧАЙ ПОДПУНКТЫ), тебе необходимо написать новую статью, строго придерживаясь следующих требований:

                !!! СТРОГО СОБЛЮДАЙ ВСЕ ПРОПИСАННЫЕ ТРЕБОВАНИЯ В СЛЕДУЮЩЕМ РАЗДЕЛЕ !!!
            </tag>

            <tag>
                **Требования**:
            
                    ### 1. Следование плану:
                    - Чётко следуй предложенной структуре, используя план как основу новой статьи.
                    - Каждый пункт плана должен быть максимально подробно и полно (ОБЯЗАТЕЛЬНО добавляй ИЗБЫТОЧНОЕ количество полезного контента) раскрыт в отдельном разделе текста.
                    - Длинна итогового текста ДОЛЖНА СОСТАВЛЯТЬ {text_len} символов. ДАННОН ТРЕБОВАНИК !!!ОБЯЗАТЕЛЬНОЕ!!!

                    ### 2. Оригинальность:
                    - Переписывание своими словами: Используй исходную статью как основу для анализа, но пиши текст от себя, как автор. Это поможет избежать однообразия и придаст тексту индивидуальность.
                    Избегание копий: Никогда не копируй фразы или предложения из исходного текста. Всегда старайся передавать идеи по-своему, так, чтобы новый текст был полностью уникален.
                    - Эмоциональные акценты и примеры: Добавляй живые примеры и метафоры, которые отражают твою личную точку зрения и глубину анализа темы. Вместо того чтобы просто пересказывать, постарайся показать своё видение, делая статью более запоминающейся и интересной.
                    Избегание клише: Уходи от формальных клише и шаблонных выражений, которые часто встречаются в нейтральных текстах. Введи разнообразие в язык и стиль, чтобы читатель чувствовал увлечённость и энергию в тексте.
                    - Разнообразие подачи: Используй разные синтаксические конструкции, чередуй короткие и длинные предложения, чтобы текст был динамичным и удерживал внимание. Это избавит от однообразия и перегруженности.
                    
                    ### 3. Углубление материала:
                    - Добавление анализа и примеров: Каждая часть статьи должна быть тщательно проработана. Вместо поверхностного рассмотрения темы углубляйся в детали, давая чёткие и актуальные примеры, которые помогут читателю лучше понять материал.
                    - Аналитические выводы: Если исходный текст недостаточно глубок, дополняй его собственными выводами и анализом. Включай примеры из реальной жизни или отраслевые кейсы, которые обогащают текст и делают его полезным для читателя.
                    - Баланс деталей: Важно избегать перегрузки текста избыточной информацией. Стремись к тому, чтобы каждая деталь усиливала основную мысль, а не отвлекала от неё.
                    
                    ### 4. Стиль и язык:
                    - Профессионализм и доступность: Пиши на русском языке в профессиональном, но доступном стиле, ориентируясь на широкую аудиторию. Убедись, что текст легко воспринимается как специалистами, так и теми, кто только знакомится с темой.
                    - Ясность и простота: Избегай сложных и громоздких предложений. Чётко и ясно излагай мысли, разбивая длинные абзацы на более компактные, чтобы улучшить читаемость.
                    - Акцент на уникальность: Используй собственный голос, чтобы текст был интересным, избегай механистичности и сухого изложения. Это придаст тексту индивидуальность и повысит его ценность для аудитории.

                    ### 5. Логичность и структура:
                    - Следи за плавным переходом между разделами, обеспечивая логическую связь между ними.
                    - Используй введение для представления темы и заключение для подведения итогов статьи. НЕ ИСПОЛЬЗУЙ слово "заключение, таким образом, в итоге, наконец, и так " в тексте нигде! и другие шаблонные слова для начала заключительной части.
                    - В тексте должны быть только пункты пердставленого плана, !!!НИКАКИХ ДРУГИХ ПОДПУНКТОВ!!!
                    - НЕ выводи название стать, автора, ссылки на другие статьи, описание темы, содержание, комментарии
                    - УБРТЬ из текста упоминание компании, которая напсиала данную статью, любую саморекламу
                    - ОБЯЗАТЕЛЬНО УБРАТЬ со всего текста любую рекламу
                    
                    ### 6. Дополнительные требования:
                    -  СПИСКИ: При добавлении любых списков, формат списков ДОЛЖЕН быть следующий: - (нет вводного слова или фразы, а сразу контент пункта) Контекнт пункта списка. Следуй данному пункту ОБЯЗАТЕЛЬНО!!!
            </tag>

            <tag>
                **План статьи на вход**: ["{article_plan}"]
                **Текст статьи на вход**: ["{article_content}"]
            </tag>
        """.format(text_len=len(article_content), article_content=article_content, article_plan=article_plan)

        response = await client.chat.completions.create(
            model="o1-preview",
            # model="o1-mini",
            messages=[{"role": "user", "content": article_query}]
        )
        
        # model="gpt-4o",
        # messages=[
        #         {"role": "system", "content": "You are a professional SEO content writer."},
        #         {"role": "user", "content": article_query}
        #     ]
        # )
        
        total_tokens_o1 += response.usage.total_tokens
        
        initial_article = response.choices[0].message.content
        # print(f"\n\n Первоначальная статья = \n\n{initial_article}\n\n")

    except Exception as e:
        log_error("Ошибка при генерации первичной статьи с помощью OpenAI", e)
        return "Не удалось сгенерировать первичную статью."

    ###########################################################################################################################
    # Добавление ключевых слов
    ###########################################################################################################################

    # Предполагается, что `generate_keywords_for_article` — это функция для получения ключевых слов через API (например, Serpstat)
    try:
        # Список ключевых слов, который генерируется по заголовку статьи
        keywords = await generate_keywords_for_article(url, article_title, session)

        # Генерация финальной статьи с учетом ключевых слов
        keyword_insertion_query = f"""
            <tag>
                **Роль**: Ты выступаешь в роли **SEO-специалиста**, который должен интегрировать ключевые слова в текст статьи, сохраняя её читабельность и органичность. Задача — включить ключевые слова естественным образом и повысить релевантность статьи для поисковых систем.
            </tag>

            <tag>
                **Задача**: Тебе необходимо встроить ключевые слова в текст исходной статьи, НИКАК НЕ МЕНЯЯ ИЗНАЧАЛЬНУЮ СТАТЬЮ, добавляя ключевые слова органично, без выделений, без добавления новых структурных элементов. 
                
                Важно, чтобы результат включал только основные части статьи: введение, основную часть и заключение (которые он явно не выделял бы), и не содержал новостей, списков тем, авторов, содержания, комментариев и любых других внешних структурных элементов.

                !!! СТРОГО СОБЛЮДАЙ ВСЕ ПРОПИСАННЫЕ ТРЕБОВАНИЯ В СЛЕДУЮЩЕМ РАЗДЕЛЕ !!!
                
                
                
            </tag>

            <tag>
                **Требования:**
            
                    ### 1. Использование ключевых слов:
                    - **Заголовок**: Включай основное ключевое слово в заголовок, ближе к началу.
                    - **Введение**: Используй ключевое слово в первом абзаце статьи для обозначения темы.
                    - **Подзаголовки**: Включай ключевые слова или их вариации в подзаголовки для улучшения структуры текста.
                    - **Тело статьи**: Распределяй ключевые слова равномерно, избегая их чрезмерного скопления в одном месте.
                    
                    - **Выделение**: Никак не выделяй добавленные ключевые слова.

                    ### 2. Плотность ключевых слов:
                    - **Плотность**: Поддерживай плотность ключевых слов на уровне 1-2%, изначальная длина статьи равна {len(initial_article)} символам. Стремись к органичности вхождений, избегай "набивки".

                    ### 3. Оптимизация для мобильного и голосового поиска:
                    - Ключевые фразы должны быть естественными и приближенными к разговорной речи для голосовых запросов.

                    ### 4. Семантическое расширение:
                    - Используй синонимы и long-tail keywords для повышения семантической релевантности текста.
                    
                    ### 5. Вывод:
                    - Текст выводи на русском языке.
                    - Длинна итогового текста ДОЛЖНА СОСТАВЛЯТЬ {len(initial_article)} символов. ДАННОН ТРЕБОВАНИЕ !!!ОБЯЗАТЕЛЬНОЕ!!!


            </tag>

            <tag>
                **Ключевые слова**: ["{keywords}"]

                **Текст статьи на вход**: ["{initial_article}"]

            </tag>

        """

        response = await client.chat.completions.create(
            model="o1-preview",
            messages=[{"role": "user", "content": keyword_insertion_query}]
        )
        
        # model="gpt-4o",
        # messages=[
        #         {"role": "system", "content": "You are a professional SEO content writer."},
        #         {"role": "user", "content": keyword_insertion_query
                 
        #          }
        #     ]
        # )
        
        total_tokens_o1 += response.usage.total_tokens

        key_words_article = response.choices[0].message.content
        # print(f"Статья с ключевыми словами = {key_words_article}")
        
        keywords_article_title = await rewrite_keywords_title(article_title, keywords)
        
        print(f"total_tokens_4o = {total_tokens_4о}")
        print(f"total_tokens_o1 = {total_tokens_o1}")
        print(f"Количество символов в изначальном тексте: {len(article_content)} символов.\nКоличество символов в итоговом тексте: {len(key_words_article)} символов.\nПотери в %: {((len(key_words_article) - len(article_content)) / len(article_content)) * 100}")
        print(f"Ключевые слова: {keywords}")
    
    except Exception as e:
        log_error("Ошибка при получении ключевых слов", e)
        return "Не удалось получить ключевые слова для статьи."

    return key_words_article, keywords_article_title
